// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id        String          @id @default(uuid())
  name      String
  models    Model[]
  controls  ControlPoints[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Model {
  id        String    @id @default(uuid())
  name      String    @unique
  image     String?
  status    String
  vehicles  Vehicle[]
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Vehicle {
  id        String     @id @default(uuid())
  name      String
  shortCode String     @unique
  shortVin  String     @unique
  status    String
  model     Model      @relation(fields: [modelId], references: [id])
  modelId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  controls  Controls[]
}

model PartTeam {
  id        String      @id @default(uuid())
  code      String      @unique
  name      String      @unique
  slug      String      @unique
  status    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  partGroup PartGroup[]
}

model PartGroup {
  id           String    @id @default(uuid())
  code         String    @unique
  name         String
  status       String
  failures     Failure[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  partTeam     PartTeam  @relation(fields: [partTeamSlug], references: [slug])
  partTeamSlug String
}

model Failure {
  id          String    @id @default(uuid())
  code        String    @unique
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  partGroup   PartGroup @relation(fields: [partGroupId], references: [id])
  partGroupId String
}

model Customer {
  id     String @id @default(uuid())
  name   String
  region String
}

// Kontrol Noktalari; S1, S2 gibi..
model ControlPoints {
  id        String     @id @default(uuid())
  name      String     @unique
  status    String
  groups    Group[]
  controls  Controls[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Kontroller, aracin bir noktadaki
model Controls {
  id               String           @id @default(uuid())
  shortCode        String
  status           String
  username         String
  records          ControlRecords[]
  controlPoints    ControlPoints    @relation(fields: [controlPointsId], references: [id])
  controlPointsId  String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  vehicle          Vehicle          @relation(fields: [vehicleShortCode], references: [shortCode])
  vehicleShortCode String
}

// Kontrol detaylari, satir satir
model ControlRecords {
  id            String   @id @default(uuid())
  title         String
  description   String
  faultGrade    String
  faultLocation String
  missed        Boolean
  images        Image[]
  controls      Controls @relation(fields: [controlsId], references: [id])
  controlsId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Image {
  id               String         @id @default(uuid())
  url              String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  controlRecords   ControlRecords @relation(fields: [controlRecordsId], references: [id])
  controlRecordsId String

  @@index([controlRecordsId])
}
